# Generated by Django 3.0.6 on 2021-02-12 10:16

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('odp_app', '0001_initial'), ('odp_app', '0003_areafunzionalecoinvolta_ctu_profilooperatorecoinvolto_tipologiaerrore'), ('odp_app', '0004_auto_20210124_1627'), ('odp_app', '0005_auto_20210124_1652'), ('odp_app', '0006_auto_20210124_1653'), ('odp_app', '0007_auto_20210124_1739'), ('odp_app', '0008_auto_20210124_1820'), ('odp_app', '0009_auto_20210211_1157'), ('odp_app', '0010_ctu_accoglimento_giudice'), ('odp_app', '0011_auto_20210211_1626'), ('odp_app', '0012_auto_20210211_1629'), ('odp_app', '0013_auto_20210211_1646')]

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assicurazione',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assicurazione', models.CharField(db_index=True, max_length=50)),
            ],
            options={
                'verbose_name': 'assicurazione',
                'verbose_name_plural': 'assicurazioni',
                'ordering': ('assicurazione',),
            },
        ),
        migrations.CreateModel(
            name='Comune',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codice', models.CharField(max_length=4)),
                ('comune', models.CharField(db_index=True, max_length=50)),
            ],
            options={
                'verbose_name': 'comune',
                'verbose_name_plural': 'comuni',
                'ordering': ('comune', 'provincia'),
            },
        ),
        migrations.CreateModel(
            name='DannoPatrimoniale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'danno patrimoniale',
                'verbose_name_plural': 'danni patrimoniali',
                'ordering': ('tipo',),
            },
        ),
        migrations.CreateModel(
            name='DirittoInviolabile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diritto', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'diritto',
                'verbose_name_plural': 'diritti',
                'ordering': ('diritto',),
            },
        ),
        migrations.CreateModel(
            name='Esaminatore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('esaminatore', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'esaminatore',
                'verbose_name_plural': 'esaminatori',
                'ordering': ('esaminatore',),
            },
        ),
        migrations.CreateModel(
            name='FattoreLiquidazione',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fattore', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'fattore rilevante di liquidazione del danno non patrimoniale',
                'verbose_name_plural': 'fattori rilevanti di liquidazione del danno non patrimoniale',
                'ordering': ('fattore',),
            },
        ),
        migrations.CreateModel(
            name='FattoreLiquidazioneDP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fattore', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'fattore rilevante di liq. del dp',
                'verbose_name_plural': 'fattori rilevanti di liq. del dp',
                'ordering': ('fattore',),
            },
        ),
        migrations.CreateModel(
            name='Infortunato',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eta', models.IntegerField(blank=True, null=True, verbose_name='età')),
                ('est_maggiorenne', models.CharField(choices=[('0', 'Minorenne'), ('1', 'Maggiorenne'), ('2', '(non ricavabile)')], max_length=1, null=True, verbose_name='est maggiorenne')),
                ('sesso', models.CharField(choices=[('M', 'Maschio'), ('F', 'Femmina'), ('N', '(non ricavabile)')], max_length=1, null=True, verbose_name='sesso')),
                ('percentuale_colpa_attore', models.DecimalField(decimal_places=2, max_digits=5, null=True, verbose_name='percentuale colpa attore')),
                ('ente_sociale', models.CharField(blank=True, choices=[('', '(non specificato)'), ('INAIL', 'INAIL'), ('INAIL- RESPINTA', 'INAIL- RESPINTA'), ('INAL', 'INAL'), ('INAM', 'INAM'), ('INPS', 'INPS'), ('INPS - INAIL', 'INPS - INAIL'), ('INPS-INAM', 'INPS-INAM'), ('MINISTERO PP. TT.', 'MINISTERO PP. TT.')], max_length=25, null=True, verbose_name='ente sociale')),
                ('tipo_sr', models.CharField(blank=True, choices=[('S', 'Surroga'), ('R', 'Regresso')], max_length=1, null=True, verbose_name='tipo surroga')),
                ('importo_sr', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo surroga')),
                ('importo_provvisionale', models.DecimalField(decimal_places=2, max_digits=20, null=True, verbose_name='importo acconto')),
                ('tipo_rivalutazione', models.CharField(choices=[('0', 'Nessuna'), ('1', 'Data del fatto'), ('2', 'Data della citazione'), ('3', 'Data della pubblicazione'), ('4', 'Altro')], max_length=1, null=True, verbose_name='tipo rivalutazione')),
                ('interessi_legali_it', models.DateField(blank=True, null=True, verbose_name='interessi legali invalidità temporanea')),
                ('interessi_legali_ip', models.DateField(blank=True, null=True, verbose_name='interessi legali invalidità permanente')),
                ('interessi_legali_dm', models.DateField(blank=True, null=True, verbose_name='interessi legali danni morali')),
                ('interessi_legali_ss', models.DateField(blank=True, null=True, verbose_name='interessi legali spese sostenute')),
                ('interessi_legali_dc', models.DateField(blank=True, null=True, verbose_name='interessi legali danni alle cose')),
                ('interessi_legali_lcit', models.DateField(blank=True, null=True, verbose_name='interessi legali lucro cessante invalidità temporanea')),
                ('interessi_legali_lcip', models.DateField(blank=True, null=True, verbose_name='interessi legali lucro cessante invalidità permanente')),
                ('est_it', models.BooleanField(verbose_name="c'è invalidità temporanea")),
                ('est_das_it', models.CharField(blank=True, editable=False, max_length=1, null=True, verbose_name='danno biologico da invalidità temporanea')),
                ('metodo_das_it', models.CharField(blank=True, choices=[('0', 'Non ricavabile'), ('1', 'Triplo Pensione Sociale'), ('3', 'Via Equitativa Pura'), ('4', 'IN IP'), ('5', 'ALTRO'), ('6', 'Euro al dì'), ('7', 'TAB'), ('8', 'Legge 57/2001'), ('9', 'Codice Assicurazioni')], max_length=1, null=True, verbose_name='metodo das it')),
                ('importo_liquidazione_das_it', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo liquidazione das it')),
                ('euro_al_di', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='euro al dì')),
                ('est_lcit', models.BooleanField(blank=True, verbose_name="c'è lucro cessante da invalidità temporanea")),
                ('metodo_lcit', models.CharField(blank=True, choices=[('0', 'Non ricavabile'), ('1', 'Reddito dimostrato'), ('2', 'Reddito presunto triplo pensione sociale'), ('3', 'Reddito medio nazionale'), ('4', 'Via equitativa pura'), ('5', 'ALTRO')], max_length=1, null=True, verbose_name='metodo lucro cessante da invalidità temporanea')),
                ('importo_liquidazione_lcit', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo lucro cessante da invalidità temporanea')),
                ('giorni_lcit', models.IntegerField(blank=True, null=True, verbose_name='giorni lucro cessante da invalidità temporanea')),
                ('est_ip', models.BooleanField(verbose_name="c'è invalidità permanente")),
                ('est_das_ip', models.CharField(blank=True, max_length=1, null=True, verbose_name='danno biologico da invalidità permanente')),
                ('metodo_das_ip', models.CharField(blank=True, choices=[('0', 'Non ricavabile'), ('1', 'Calcolo a Punto'), ('2', 'Triplo Pensione Sociale'), ('4', 'Via equitativa Pura'), ('5', 'ALTRO'), ('3', 'Reddito medio nazionale'), ('7', 'Legge 57 / 2001'), ('8', 'Codice Assicurazioni')], max_length=1, null=True, verbose_name='metodo das ip')),
                ('percentuale_das_ip', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='percentuale das ip')),
                ('importo_liquidazione_das_ip', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo liquidazione das ip')),
                ('est_lcip', models.BooleanField(blank=True, verbose_name="c'è lucro cessante da invalidità permanente")),
                ('metodo_lcip', models.CharField(blank=True, choices=[('0', 'Non ricavabile'), ('1', 'Reddito dimostrato'), ('2', 'Reddito presunto triplo pensione sociale'), ('3', 'Reddito medio nazionale'), ('4', 'Via equitativa pura'), ('5', 'ALTRO')], max_length=1, null=True, verbose_name='metodo lucro cessante da invalidità permanente')),
                ('percentuale_lcip', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='percentuale')),
                ('importo_liquidazione_lcip', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo lucro cessante da invalidità permanente')),
                ('est_clg', models.BooleanField(verbose_name='est capacità lavorativa generica')),
                ('est_cls', models.BooleanField(verbose_name='est capacità lavorativa specifica')),
                ('est_dm', models.BooleanField(verbose_name="c'è danno morale")),
                ('motivazione', models.CharField(blank=True, max_length=255, null=True, verbose_name='motivazione')),
                ('metodo_di_quantificazione', models.CharField(blank=True, max_length=255, null=True, verbose_name='metodo di quantificazione')),
                ('periodo_di_sopravvivenza', models.CharField(blank=True, max_length=255, null=True, verbose_name='periodo di sopravvivenza')),
                ('criterio_liquidazione', models.CharField(blank=True, max_length=255, null=True, verbose_name='criterio di liquidazione')),
                ('est_rdjh', models.BooleanField(verbose_name='est riconoscimento danno jure haereditario')),
                ('est_pddb', models.BooleanField(verbose_name='est personalizzazione del danno biologico')),
                ('est_interazione', models.BooleanField(verbose_name='est interazione tra risarcimento danno patrimoniale e risarcimento danno non patrimoniale')),
                ('sunt_diritti_lesi', models.BooleanField(verbose_name='ci sono diritti lesi')),
                ('percentuale_pddb', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% danno')),
                ('importo_liquidazione_dm', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo liquidazione danni morali')),
                ('est_dm_vp', models.BooleanField(verbose_name='via equitativa pura')),
                ('est_dm_it', models.BooleanField(verbose_name='da invalidità temporanea')),
                ('est_dm_ip', models.BooleanField(verbose_name='da invalidità permanente')),
                ('importo_liquidazione_dmit', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='Importo danni morali da I.T.')),
                ('durata_dmit', models.IntegerField(blank=True, null=True, verbose_name='Durata danni morali da I.T.')),
                ('importo_liquidazione_dmip', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo danni morali da I.P.')),
                ('percentuale_dmip', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% danni morali da I.P.')),
                ('est_ss', models.BooleanField(verbose_name='risarcite spese sostenute')),
                ('est_ss_sostenute', models.BooleanField(verbose_name='risarcite spese già sostenute')),
                ('importo_sostenute', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo spese già sostenute')),
                ('est_ss_future', models.BooleanField(verbose_name='risarcite spese future')),
                ('importo_future', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo spese future')),
                ('importo_danni_cose', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo danni alle cose')),
                ('importo_altri_danni', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo altri danni')),
                ('altri_danni', models.TextField(blank=True, null=True, verbose_name='altri danni')),
                ('tipo_lesione', models.CharField(choices=[('S', 'Singola'), ('C', 'Complessa'), ('N', 'Non pervenuto')], max_length=1, null=True, verbose_name='tipo lesione')),
                ('accoglimento_giudice', models.CharField(blank=True, choices=[('S', 'Sì'), ('N', 'No'), ('P', 'Parzialmente')], max_length=1, null=True, verbose_name='accoglimento giudice')),
                ('qualifica_ctu', models.CharField(blank=True, max_length=25, null=True, verbose_name='qualifica ctu')),
                ('tabella', models.BooleanField(verbose_name='tabella')),
                ('sede_tabella', models.CharField(blank=True, max_length=25, null=True, verbose_name='sede tabella')),
                ('note_fattori_rilevanti_liquidazione', models.TextField(blank=True, null=True, verbose_name='note ai fattori rilevanti di liquidazione del danno non patrimoniale')),
                ('note_fattori_rilevanti_liquidazione_dp', models.TextField(blank=True, null=True, verbose_name='note ai fattori rilevanti di liquidazione del danno patrimoniale')),
                ('dm_est', models.BooleanField(verbose_name='est danno da morte')),
                ('dm_dbjh_est', models.BooleanField(verbose_name='est danno biologico jure hereditario')),
                ('dm_dbjh_importo_liquidazione', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo liquidazione danno biologico jure hereditario')),
                ('tipo_ctu', models.CharField(blank=True, choices=[('00', ''), ('01', 'Medico Legale'), ('02', 'Medico Legale Plurispecialista'), ('03', 'Altre Spec. Omogenea'), ('04', 'Altre Spec. Non Omogenea'), ('05', 'Medico Generico'), ('06', 'Non ricavabile')], max_length=2, null=True, verbose_name='tipo ctu')),
                ('tipo_quesito', models.CharField(blank=True, choices=[('00', ''), ('01', 'Riportato'), ('02', 'Deducibile'), ('03', 'Non Deducibile')], max_length=2, null=True, verbose_name='tipo quesito')),
                ('resoconto_op_per', models.CharField(blank=True, choices=[('00', ''), ('01', 'No'), ('02', 'Sintetico'), ('03', 'Dettagliato')], max_length=2, null=True, verbose_name='resoconto op peritali')),
                ('tipo_ctp', models.CharField(blank=True, choices=[('00', ''), ('01', 'Nominati'), ('02', 'Non Nominati'), ('03', 'Non Ricavabile')], max_length=2, null=True, verbose_name='tipo ctp')),
                ('ctp_nominati', models.CharField(blank=True, choices=[('00', ''), ('01', 'Richieste CTP riportate in CTU'), ('02', 'Richieste CTP non riportate'), ('03', 'CTP in accordo con CTU')], max_length=2, null=True, verbose_name='ctp nominati')),
                ('tipo_doc_medica', models.CharField(blank=True, choices=[('00', ''), ('01', 'Assente'), ('02', 'Insufficiente'), ('03', 'Sintetica'), ('04', 'Dettagliata')], max_length=2, null=True, verbose_name='tipo documentazione medica')),
                ('tipo_ana_generale', models.CharField(blank=True, choices=[('00', ''), ('01', 'Sintetica'), ('02', 'Dettagliata'), ('03', 'Indifferente'), ('04', 'Assente')], max_length=2, null=True, verbose_name='tipo anamnesi generale')),
                ('tipo_ana_lavorativa', models.CharField(blank=True, choices=[('00', ''), ('01', 'Sintetica'), ('02', 'Dettagliata'), ('03', 'Solo lavoro attuale'), ('04', 'Assente')], max_length=2, null=True, verbose_name='tipo anamnesi lavorativa')),
                ('tipo_stato_attuale', models.CharField(blank=True, choices=[('00', ''), ('01', 'Sintetico'), ('02', 'Dettagliato'), ('03', 'Insufficiente'), ('04', 'Periziando deceduto')], max_length=2, null=True, verbose_name='tipo stato attuale')),
                ('tipo_eo_generale', models.CharField(blank=True, choices=[('00', ''), ('01', 'Assente'), ('02', 'Indifferente'), ('03', 'Sintetico'), ('04', 'Dettagliato'), ('05', 'P. deceduto')], max_length=2, null=True, verbose_name='tipo esame obiettivo generale')),
                ('tipo_eo_specifico', models.CharField(blank=True, choices=[('00', ''), ('01', 'Assente'), ('02', 'Sintetico'), ('03', 'Dettagliato'), ('04', 'P. deceduto')], max_length=2, null=True, verbose_name='tipo esame obiettivo specifico')),
                ('flag_vis_spec', models.CharField(blank=True, choices=[('00', ''), ('Si', 'Sì'), ('No', 'No')], max_length=2, null=True, verbose_name='richiesta visita specialistica')),
                ('tipo_esami_strumentali', models.CharField(blank=True, choices=[('00', ''), ('01', 'Assenti'), ('02', 'In atti'), ('03', 'Portati dal periziando'), ('04', 'Richiesti dal CTU'), ('05', 'In atti - portati dal periz.'), ('06', 'In atti - richiesti dal CTU'), ('07', 'Portati dal per. - Rich. CTU')], max_length=2, null=True, verbose_name='tipo esami strumentali')),
                ('tipo_trat_ml', models.CharField(blank=True, choices=[('00', ''), ('01', 'Assente'), ('02', 'Insufficiente breve'), ('03', 'Insufficiente lunga'), ('04', 'Esaustiva sintetica'), ('05', 'Esaustiva dettagliata')], max_length=2, null=True, verbose_name='tipo trattazione medico legale')),
                ('tipo_risposta_quesiti', models.CharField(blank=True, choices=[('00', ''), ('01', 'Completa'), ('02', 'Incompleta')], max_length=2, null=True, verbose_name='tipo risposta quesiti')),
                ('tipo_quesito_ndc', models.BooleanField(verbose_name='CTU - Nesso di causa')),
                ('tipo_quesito_sa', models.BooleanField(verbose_name='CTU - stato anteriore')),
                ('tipo_quesito_t', models.BooleanField(verbose_name='CTU - invalidità temporanea')),
                ('tipo_quesito_db', models.BooleanField(verbose_name='CTU - danno biologico')),
                ('tipo_quesito_clg', models.BooleanField(verbose_name='CTU - capacità lavorativa generica')),
                ('tipo_quesito_cls', models.BooleanField(verbose_name='CTU - capacità lavorativa specifica')),
                ('tipo_quesito_de', models.BooleanField(verbose_name='CTU - danno estetico')),
                ('tipo_quesito_ss', models.BooleanField(verbose_name='CTU - spese sostenute')),
                ('tipo_quesito_sf', models.BooleanField(verbose_name='CTU - spese future')),
                ('tipo_fatto_mod', models.BooleanField(verbose_name='tipo fatto mod')),
                ('tipo_fatto_solltra', models.BooleanField(verbose_name='tipo fatto solltra')),
                ('tipo_fatto_primer', models.BooleanField(verbose_name='tipo fatto primer')),
                ('tipo_fatto_ritorno', models.BooleanField(verbose_name='tipo fatto ritorno')),
                ('flag_rif_tabellare', models.BooleanField(verbose_name="c'è riferimento tabellare")),
                ('desc_rif_tabellare', models.TextField(blank=True, null=True, verbose_name='descrizione riferimento tabellare')),
                ('note_gen', models.TextField(blank=True, null=True, verbose_name='note al danneggiato')),
                ('note_ctu', models.TextField(blank=True, null=True, verbose_name='note alla CTU')),
                ('note_importi', models.TextField(blank=True, null=True, verbose_name='note importi')),
                ('note_generale', models.TextField(blank=True, null=True, verbose_name='note generale')),
                ('note_it', models.TextField(blank=True, null=True, verbose_name='note invalidità temporanea')),
                ('note_ip', models.TextField(blank=True, null=True, verbose_name='note invalidità permanente')),
                ('note_dm', models.TextField(blank=True, null=True, verbose_name='note danno morale')),
                ('importo_liquidazione_das', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=20, null=True, verbose_name='liquidazione danno alla salute (dasip+dasit)')),
                ('importo_dap', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=20, null=True, verbose_name='totale danni alla persona')),
                ('importo_ad', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=20, null=True, verbose_name='totale altri danni')),
                ('importo_totale', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=20, null=True, verbose_name='totale')),
                ('importo_liquidato', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=20, null=True, verbose_name='totale liquidato')),
                ('liquidazione_totale', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=20, null=True, verbose_name='liquidazione totale')),
                ('importo_rivalutazione', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo rivalutazione')),
                ('pre2001', models.BooleanField(db_index=True, default=False, verbose_name='Risale a prima del 2001')),
                ('importo_dannopatrimoniale', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo liquidato per altri danni patrimoniali')),
                ('interessi_dannopatrimoniale', models.DateField(blank=True, null=True, verbose_name='interessi legali per altri danni patrimoniali')),
                ('note_dannopatrimoniale', models.TextField(blank=True, null=True, verbose_name='note per altri danni patrimoniali')),
                ('note_exaltrespese', models.TextField(blank=True, null=True, verbose_name='note per spese e danni alle cose')),
                ('importo_dirittoinviolabile', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True, verbose_name='importo liquidato')),
                ('interessi_dirittoinviolabile', models.DateField(blank=True, null=True, verbose_name='interessi legali')),
                ('note_dirittoinviolabile', models.TextField(blank=True, null=True, verbose_name='note')),
                ('pubblicabile', models.BooleanField(default=False, verbose_name='Pubblicabile')),
                ('note_prova_del_dnp', models.TextField(blank=True, null=True, verbose_name='note alle prove del danno non patrimoniale')),
                ('note_prova_del_dp', models.TextField(blank=True, null=True, verbose_name='note alle prove del danno patrimoniale')),
                ('note_trend_liquidazione', models.TextField(blank=True, null=True, verbose_name='note ai trend di liquidazione')),
                ('dannopatrimoniale', models.ManyToManyField(blank=True, to='odp_app.DannoPatrimoniale', verbose_name='Altri danni patrimoniali')),
                ('dirittoinviolabile', models.ManyToManyField(blank=True, to='odp_app.DirittoInviolabile', verbose_name='Diritti lesi')),
                ('fattori_rilevanti_liquidazione', models.ManyToManyField(blank=True, to='odp_app.FattoreLiquidazione', verbose_name='fattori rilevanti di liquidazione del danno non patrimoniale')),
                ('fattori_rilevanti_liquidazione_dp', models.ManyToManyField(blank=True, to='odp_app.FattoreLiquidazioneDP', verbose_name='fattori rilevanti di liquidazione del danno patrimoniale')),
            ],
            options={
                'verbose_name': 'danneggiato',
                'verbose_name_plural': 'danneggiati',
            },
        ),
        migrations.CreateModel(
            name='Lesione',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesione', models.CharField(db_index=True, max_length=100)),
            ],
            options={
                'verbose_name': 'lesione',
                'verbose_name_plural': 'lesioni',
                'ordering': ('lesione',),
            },
        ),
        migrations.CreateModel(
            name='Osservatorio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('osservatorio', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'osservatorio',
                'verbose_name_plural': 'osservatori',
                'ordering': ('osservatorio',),
            },
        ),
        migrations.CreateModel(
            name='Postumo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postumo', models.CharField(db_index=True, max_length=100)),
            ],
            options={
                'verbose_name': 'postumo',
                'verbose_name_plural': 'postumi',
                'ordering': ('postumo',),
            },
        ),
        migrations.CreateModel(
            name='Postumo_tabulato',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postumo_tabulato', models.CharField(db_index=True, max_length=150)),
            ],
            options={
                'verbose_name': 'postumo da tabella standard',
                'verbose_name_plural': 'postumi da tabella standard',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Professione',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('professione', models.CharField(db_index=True, max_length=50)),
            ],
            options={
                'verbose_name': 'professione',
                'verbose_name_plural': 'professioni',
                'ordering': ('professione',),
            },
        ),
        migrations.CreateModel(
            name='ProfiloRilevante',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profilo', models.CharField(max_length=80)),
            ],
            options={
                'verbose_name': 'profilo rilevante',
                'verbose_name_plural': 'profili rilevanti',
                'ordering': ('trend', 'profilo'),
            },
        ),
        migrations.CreateModel(
            name='ProvaDelDNP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prova', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'prova del danno non patrimoniale',
                'verbose_name_plural': 'prove del danno non patrimoniale',
                'ordering': ('prova',),
            },
        ),
        migrations.CreateModel(
            name='ProvaDelDP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prova', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'prova del danno patrimoniale',
                'verbose_name_plural': 'prove del danno patrimoniale',
                'ordering': ('prova',),
            },
        ),
        migrations.CreateModel(
            name='Provenienza',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provenienza', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'provenienza',
                'verbose_name_plural': 'provenienze',
                'ordering': ('provenienza',),
            },
        ),
        migrations.CreateModel(
            name='Regione',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regione', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'regione',
                'verbose_name_plural': 'regioni',
                'ordering': ('regione',),
            },
        ),
        migrations.CreateModel(
            name='Responsabilita',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('responsabilita', models.CharField(max_length=80)),
            ],
            options={
                'verbose_name': 'responsabilità',
                'verbose_name_plural': 'responsabilità',
                'ordering': ('responsabilita',),
            },
        ),
        migrations.CreateModel(
            name='RichiestaParteAttrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('richiesta', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'richiesta parte attrice',
                'verbose_name_plural': 'richieste parte attrice',
                'ordering': ('richiesta',),
            },
        ),
        migrations.CreateModel(
            name='Sentenza',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grado_di_giudizio', models.CharField(choices=[('', '--nessuno--'), ('C', "Corte d'Appello"), ('P', 'Giudice di Pace'), ('T', 'Tribunale'), ('R', 'T.A.R.'), ('S', 'Consiglio di Stato')], default='', max_length=1, verbose_name='grado di giudizio')),
                ('numero_della_sezione', models.IntegerField(default=0, verbose_name='numero della sezione')),
                ('data_del_fatto', models.DateField(blank=True, null=True, verbose_name='data fatto')),
                ('data_della_citazione', models.DateField(blank=True, null=True, verbose_name='data citazione')),
                ('data_della_sentenza', models.DateField(blank=True, null=True, verbose_name='data sentenza')),
                ('data_del_deposito', models.DateField(blank=True, null=True, verbose_name='data deposito')),
                ('numero_della_sentenza', models.IntegerField(verbose_name='numero della sentenza')),
                ('estensore', models.CharField(max_length=50, verbose_name='estensore')),
                ('riconvenzionale', models.CharField(choices=[('A', 'Accolta'), ('P', 'Parz. accolta'), ('R', 'Rigettata'), ('S', 'Assente')], max_length=1, verbose_name='riconvenzionale')),
                ('anno_del_deposito', models.IntegerField(blank=True, null=True, verbose_name='anno deposito')),
                ('estctu', models.BooleanField(verbose_name='ctu allegata')),
                ('note_profili_rilevanti', models.TextField(blank=True, null=True, verbose_name='note ai profili rilevanti')),
                ('anno_di_arrivo', models.PositiveIntegerField(null=True, verbose_name='anno arrivo')),
                ('codice', models.CharField(blank=True, max_length=50, null=True, verbose_name='Codice archivio')),
                ('numero_attori', models.IntegerField(default=0, null=True, verbose_name='numero attori')),
                ('numero_convenuti', models.IntegerField(default=0, null=True, verbose_name='numero convenuti')),
                ('numero_terzi', models.IntegerField(default=0, null=True, verbose_name='numero terzi')),
                ('fatto', models.TextField(verbose_name='fatto')),
                ('note_sentenza', models.TextField(blank=True, verbose_name='note')),
                ('ocr', models.TextField(blank=True, verbose_name='ocr')),
                ('file_img', models.FileField(blank=True, null=True, upload_to='immagine/', verbose_name='immagine')),
                ('file_sch', models.FileField(blank=True, null=True, upload_to='scheda/', verbose_name='scheda riassuntiva')),
                ('file_cmn', models.FileField(blank=True, null=True, upload_to='commento/', verbose_name='scheda di commento')),
                ('forza_esclusione', models.BooleanField(default=False, verbose_name='Rendi la sentenza non pubblicabile, indipendentemente dalle schede infortunato')),
                ('assicurazione', models.ManyToManyField(to='odp_app.Assicurazione', verbose_name='assicurazione')),
                ('esaminatore', models.ManyToManyField(to='odp_app.Esaminatore', verbose_name='esaminatore')),
                ('osservatorio', models.ManyToManyField(to='odp_app.Osservatorio', verbose_name='osservatorio')),
                ('provenienza', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='odp_app.Provenienza', verbose_name='provenienza')),
                ('responsabilita', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='odp_app.Responsabilita', verbose_name='responsabilità')),
                ('sede_tribunale', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='odp_app.Comune', verbose_name='sede tribunale')),
            ],
            options={
                'verbose_name': 'sentenza',
                'verbose_name_plural': 'sentenze',
                'ordering': ('-anno_di_arrivo', '-data_della_sentenza'),
            },
        ),
        migrations.CreateModel(
            name='TrendLiquidazione',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trend', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'trend di liquidazione',
                'verbose_name_plural': 'trend di liquidazione',
                'ordering': ('trend',),
            },
        ),
        migrations.CreateModel(
            name='TrendProfiloRilevante',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trend', models.CharField(max_length=80)),
            ],
            options={
                'verbose_name': 'trend profilo rilevante',
                'verbose_name_plural': 'trend profili rilevanti',
                'ordering': ('trend',),
            },
        ),
        migrations.CreateModel(
            name='TrendProfiloRilevanteContainer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profili_rilevanti', models.ManyToManyField(blank=True, db_index=True, to='odp_app.ProfiloRilevante', verbose_name='profili rilevanti')),
                ('sentenza', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='odp_app.Sentenza')),
                ('trend', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='odp_app.TrendProfiloRilevante', verbose_name='parola chiave')),
            ],
            options={
                'verbose_name': 'profilo rilevante container',
                'verbose_name_plural': 'profili rilevanti containers',
            },
        ),
        migrations.CreateModel(
            name='Provincia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targa', models.CharField(max_length=2, null=True)),
                ('provincia', models.CharField(db_index=True, max_length=50, null=True)),
                ('regione', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='odp_app.Regione', verbose_name='regione')),
            ],
            options={
                'verbose_name': 'provincia',
                'verbose_name_plural': 'province',
                'ordering': ('provincia',),
            },
        ),
        migrations.AddField(
            model_name='profilorilevante',
            name='trend',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='odp_app.TrendProfiloRilevante'),
        ),
        migrations.CreateModel(
            name='Invalidita_temporanea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentuale', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='%')),
                ('giorni', models.IntegerField(verbose_name='giorni')),
                ('infortunato', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='odp_app.Infortunato', verbose_name='danneggiato')),
            ],
            options={
                'verbose_name': 'invalidità temporanea',
                'verbose_name_plural': 'invalidità temporanee',
                'ordering': ('-percentuale',),
            },
        ),
        migrations.AddField(
            model_name='infortunato',
            name='lesione',
            field=models.ManyToManyField(blank=True, to='odp_app.Lesione'),
        ),
        migrations.AddField(
            model_name='infortunato',
            name='postumo',
            field=models.ManyToManyField(blank=True, to='odp_app.Postumo'),
        ),
        migrations.AddField(
            model_name='infortunato',
            name='postumo_tabulato',
            field=models.ManyToManyField(blank=True, to='odp_app.Postumo_tabulato'),
        ),
        migrations.AddField(
            model_name='infortunato',
            name='professione',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='odp_app.Professione', verbose_name='professione'),
        ),
        migrations.AddField(
            model_name='infortunato',
            name='prova_del_dnp',
            field=models.ManyToManyField(blank=True, to='odp_app.ProvaDelDNP', verbose_name='prove del danno non patrimoniale'),
        ),
        migrations.AddField(
            model_name='infortunato',
            name='prova_del_dp',
            field=models.ManyToManyField(blank=True, to='odp_app.ProvaDelDP', verbose_name='prove del danno patrimoniale'),
        ),
        migrations.AddField(
            model_name='infortunato',
            name='richiestaparteattrice',
            field=models.ManyToManyField(to='odp_app.RichiestaParteAttrice', verbose_name='Richiesta parte attrice'),
        ),
        migrations.AddField(
            model_name='infortunato',
            name='sentenza',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='infortunati', to='odp_app.Sentenza', verbose_name='sentenza'),
        ),
        migrations.AddField(
            model_name='infortunato',
            name='trend_liquidazione',
            field=models.ManyToManyField(blank=True, to='odp_app.TrendLiquidazione', verbose_name='trend di liquidazione'),
        ),
        migrations.AddField(
            model_name='comune',
            name='provincia',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='odp_app.Provincia'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AreaFunzionaleCoinvolta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.CharField(max_length=100, unique=True, verbose_name='CTU-Area funzionale coinvolta')),
            ],
            options={
                'verbose_name': 'CTU - Area funzionale',
                'verbose_name_plural': 'CTU- Aree funzionali',
            },
        ),
        migrations.CreateModel(
            name='ProfiloOperatoreCoinvolto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profilo', models.CharField(max_length=100, unique=True, verbose_name='CTU - Profilo operatore coinvolto')),
            ],
            options={
                'verbose_name': 'CTU-Profilo operatore',
                'verbose_name_plural': 'CTU-Profili operatori',
            },
        ),
        migrations.CreateModel(
            name='TipologiaErrore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipologia', models.CharField(max_length=100, unique=True, verbose_name='CTU - Tipologia di errore')),
            ],
            options={
                'verbose_name': 'CTU-Tipologia di errore',
                'verbose_name_plural': 'CTU-Tipologie di errori',
            },
        ),
        migrations.CreateModel(
            name='Ctu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_nativo_digitale', models.BooleanField(default=False, help_text='Tick su casella se sì', verbose_name='File nativo digitale')),
                ('tipo_procedimento', models.SmallIntegerField(choices=[(0, 'Accertamento tecnico preventivo ai sensi art. 696 bis'), (1, 'Consulenza tecnica preventiva'), (2, 'Giudizio di merito'), (3, 'Giudizio di appello'), (4, 'Mediazione EX D. LGS. 28/2010')], verbose_name='Tipologia di procedimento')),
                ('data', models.DateField(default=datetime.date.today, verbose_name='Data')),
                ('qualifica_ctu', models.TextField(blank=True, default='', verbose_name='Qualifica CTU')),
                ('quesito_formulato', models.TextField(blank=True, default='', verbose_name='Quesito formulato')),
                ('consulenza_med_legale_parte_ric', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Consulenza medico legale di parte ricorrente')),
                ('errore_lamentato', models.TextField(blank=True, default='', help_text="Se non c'è consulenza medico legale parte ricorrente, lasciare in bianco.", verbose_name='Errore lamentato')),
                ('richiesta_danni', models.TextField(blank=True, default='', verbose_name='RIchiesta danni')),
                ('consulenza_med_legale_parte_con', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Consulenza medico legale di parte convenuta')),
                ('considerazioni_difensive', models.TextField(blank=True, default='', help_text="Se non c'è consulenza medico legale parte convenuta, lasciare in bianco.", verbose_name='Considerazioni difensive')),
                ('proposta_risarcitoria', models.TextField(blank=True, default='', verbose_name='Proposta risarcitoria')),
                ('infortunato', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='odp_app.Infortunato', verbose_name='Danneggiato')),
                ('area_funzionale_coinvolta_princ', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='schede_ctu_princ_set', to='odp_app.AreaFunzionaleCoinvolta', verbose_name='Principale area funzionale coinvolta')),
                ('area_funzionale_coinvolta_sec', models.ManyToManyField(blank=True, related_name='schede_ctu_sec_set', to='odp_app.AreaFunzionaleCoinvolta', verbose_name='Aree funzionali coinvolte secondarie')),
                ('citazioni_bibliografiche', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Citazioni bibliografiche')),
                ('corresponsabilita_altri', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Corresponsabilità di altri enti/aziende')),
                ('identificazione_responsabilita', models.SmallIntegerField(choices=[(0, 'Presente'), (1, 'Assente'), (2, 'Dubbia')], default=2, verbose_name='Identificazione responsabilità')),
                ('identificazione_responsabilita_arg', models.TextField(blank=True, default='', help_text="Se non c'è identificazione responsabilità, lasciare in bianco.", verbose_name='Argomentazione su identificazione responsabilità')),
                ('profilo_operatore_coinvolto_princ', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='schede_ctu_princ_set', to='odp_app.ProfiloOperatoreCoinvolto', verbose_name='Profilo del principale operatore coinvolto')),
                ('profilo_operatore_coinvolto_sec', models.ManyToManyField(blank=True, related_name='schede_ctu_sec_set', to='odp_app.ProfiloOperatoreCoinvolto', verbose_name='Profili secondari operatori coinvolti')),
                ('tipologia_errore', models.ManyToManyField(to='odp_app.TipologiaErrore', verbose_name='Tipologia/e di errore/i')),
                ('danno_biologico_permanente', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Danno biologico permanente')),
                ('danno_biologico_terminale', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Danno biologico terminale')),
                ('danno_differenziale_inail', models.TextField(blank=True, default='', verbose_name='Danno differenziale inail')),
                ('danno_iatrogeno_differenziale_dal', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, verbose_name='Danno iatrogeno differenziale - Dal...')),
                ('danno_jure_proprio', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Danno jure proprio')),
                ('danno_morte', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Danno da morte')),
                ('percentuale_danno_permanente', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, verbose_name='Percentuale del danno biologico permanente')),
                ('danno_perdita_chances_di_sopravvivenza', models.DecimalField(blank=True, decimal_places=2, help_text='Lasciare libero se non sussiste il danno.', max_digits=5, null=True, verbose_name='Danno da perdita chances di sopravvivenza (%)')),
                ('danno_perdita_chances_guarigione', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Danno da perdita di chances di guarigione')),
                ('danno_perdita_chances_guarigione_arg', models.TextField(blank=True, default='', help_text="Se non c'è danno, lasciare in bianco.", verbose_name='Indicazioni sul danno da perdita di chances di guarigione')),
                ('doc', models.FileField(blank=True, null=True, upload_to='ctu/', verbose_name='Allega un pdf')),
                ('note', models.TextField(blank=True, default='', verbose_name='Note (opzionale)')),
                ('riduzione_capacita_lavorativa_specifica', models.SmallIntegerField(choices=[(0, 'Si'), (1, 'No'), (2, 'Non applicabile')], default=0, verbose_name='Riduzione capacità lavorativa specifica')),
                ('riduzione_capacita_lavorativa_specifica_arg', models.TextField(blank=True, default='', verbose_name='Dettagli sulla riduzione di capacità lavorativa specifica')),
                ('riferimento_valutativo', models.SmallIntegerField(choices=[(0, 'Altro (specificare)'), (1, 'Tabella Comm. Min. ex DM 26/5/2004'), (2, 'Linee guida SIMLA 2016'), (3, 'Ronchi et al, 2015'), (4, 'Tabelle DM 3/7/03')], default=3, verbose_name='Riferimento valutativo')),
                ('rimborso_spese_mediche_prodotte', models.BooleanField(default=False, help_text='Check se si, lasciare bianco se no', verbose_name='Rimborso spese mediche prodotte')),
                ('rimborso_spese_mediche_prodotte_arg', models.TextField(blank=True, default='', verbose_name='Dettagli sul rimborso delle spese mediche prodotte')),
                ('danno_iatrogeno_differenziale_al', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, verbose_name='Danno iatrogeno differenziale - Al...')),
                ('accoglimento_giudice', models.SmallIntegerField(choices=[(0, 'Non applicabile'), (1, 'Parziale'), (2, 'Totale'), (3, 'Negato'), (4, 'Ordinanza')], verbose_name='Accoglimento giudice')),
                ('riferimento_valutativo_arg', models.TextField(blank=True, default='', help_text='Specificare se necessario, altrimenti si può lasciare in bianco.', verbose_name='Riferimento valutativo - specificare')),
            ],
            options={
                'verbose_name': 'Scheda CTU',
                'verbose_name_plural': 'Schede CTU',
            },
        ),
    ]
